#!/usr/bin/env node

/**
 * Module dependencies.
 */
const cors = require('cors')
const app = require('../app');
const debug = require('debug')('sokcet-server:server');
const http = require('http');
const socket = require('socket.io')
const indexRouter = require("../routes/index");
const usersRouter = require("../routes/users");
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3002');
app.set('port', port);

/**
 * Create HTTP server.
 */
app.use(cors());
const server = http.createServer(app);
const options = {
    cors: {
        origin: "http://localhost:8000",
        methods: ["GET", "POST"],
    },
};
const io = require("socket.io")(server, options);

/**
 * Listen on provided port, on all network interfaces.
 */

app.use(function (req, res, next) {
    req.io = io
    next()
})
io.on("connection", socket => {
    console.log('CONNECTED CLIENT ', socket.id)
    socket.emit("hello", "world")
    socket.on('hanif', (data) => {
        console.log(data)
    })
    socket.on('join_chat', (data) => {
        console.log(data)
        const clientData = JSON.parse(data)
        socket.join(clientData.room_name)
        io.to(clientData.room_name).emit('user_joined', `user ${clientData.user_name} joined chat`)

    })

    socket.on('send_text', (data) => {
        console.log(data)
        const clientData = JSON.parse(data)
        socket.to(clientData.room_name).emit('text', JSON.stringify(clientData))
        Array.from(socket.rooms).filter(t => {
            return t.id !== socket.id
        }).forEach(d => {
            console.log('OTHER ID, ', d)
        })

    })
    socket.on('disconnect', () => {
        console.log('CLIENT LEAVE')
    })
    socket.on("tes", (data) => {
        console.log(data)
    })
});


app.use('/', indexRouter);
app.use('/users', usersRouter);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
